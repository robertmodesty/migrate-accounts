#!/bin/bash

readonly Old_Filesystem="$1"

# ******* Under here are list of readonly variables *******

#   setup in function analysis_args():
#       readonly FirstAccount
#       readonly FirstGroup
#       readonly LastAccount
#       readonly LastGroup
#       readonly old_passwd
#       readonly old_shadow
#       readonly old_group
#       readonly old_gshadow

#   setup in function process_readonly_variables():
#       readonly MigratoryAccGrpPairs
#       readonly MigratoryAccounts
#       readonly MigratoryInitialGroups
#       readonly OtherMigratoryGroups

function analysis_args() {

  if [   ! -d "$Old_Filesystem" ] ; then
    echo "'$Old_Filesystem' is not a directiory." 1>&2
    exit 1
  fi

  shift

  while [ -n "$1" ] ; do
    case "$1" in
      "--start="*)
        readonly FirstAccount="${1:8}"
        ;;
      "--gstart="*)
        readonly FirstGroup="${1:9}"
        ;;
      "--end="*)
        readonly LastAccount="${1:6}"
        ;;
      "--gend="*)
        readonly LastGroup="${1:7}"
        ;;
      "--passwd="*)
        readonly old_passwd="${1:9}"
        ;;
      "--shadow="*)
        readonly old_shadow="${1:9}"
        ;;
      "--group="*)
        readonly old_group="${1:8}"
        ;;
      "--gshadow="*)
        readonly old_gshadow="${1:10}"
        ;;
    esac
    shift
  done

  test -z "$FirstAccount" && readonly FirstAccount=500
  test -z "$FirstGroup"   && readonly FirstGroup="$FirstAccount"
  test -z "$LastAccount"  && readonly LastAccount=65533
  test -z "$LastGroup"    && readonly LastGroup=65533
  test -z "$old_passwd"   && readonly old_passwd="$Old_Filesystem/etc/passwd"
  test -z "$old_shadow"   && readonly old_shadow="$Old_Filesystem/etc/shadow"
  test -z "$old_group"    && readonly old_group="$Old_Filesystem/etc/group"
  test -z "$old_gshadow"  && readonly old_gshadow="$Old_Filesystem/etc/gshadow"

  test ! -f "$old_passwd"  && echo "'$old_passwd' is not a file."  && exit 1
  test ! -f "$old_shadow"  && echo "'$old_shadow' is not a file."  && exit 1
  test ! -f "$old_group"   && echo "'$old_group' is not a file."   && exit 1
  test ! -f "$old_gshadow" && echo "'$old_gshadow' is not a file." && exit 1
}


function exit_if_no_root_permission() {

  if [ "$(id -u)" != "0" ]; then
    echo "This script must be run with root permission!" 1>&2
    exit 1
  fi
}


function cut_field() {
  local -i step field=$1
  local x

  if [ -n "$2" ] ; then
    x="$2"
    for (( step=1 ; step<field ; step++ )) ; do
      x=${x#*:}
    done
    echo "${x%%:*}"

  else
    while read x ; do
      for (( step=1 ; step<field ; step++ )) ; do
        x=${x#*:}
      done
      echo "${x%%:*}"
    done
  fi
}


function get_old_accounts_with_initial_group() {
  local x y userID groupID

  exec 3< "$old_passwd"
  while read -u 3 x ; do
    userID="$( cut_field 3 "$x" )"
    if [   $userID -ge $FirstAccount \
        -a $userID -le $LastAccount ] ; then
      groupID="$( cut_field 4 "$x" )"
      echo -n "${x%%:*}:"
      grep "^[^:]*:[^:]*:$groupID:" "$old_group" \
       | cut_field 1
    fi
  done
  exec 3<&-
}


function get_old_accounts() {

  echo "$MigratoryAccGrpPairs" \
   | cut_field 1
}


function get_old_initial_groups() {

  echo "$MigratoryAccGrpPairs" \
   | cut_field 2 \
   | sort \
   | uniq
}


function is_old_initial_group() {
  local oldInitGrps=" $( echo $MigratoryInitialGroups ) "

  test "${oldInitGrps}" != "${oldInitGrps#* $1 }"
  return $?
}

function is_valid_user() {
  local x

  exec 3< /etc/passwd
  while read -u 3 x ; do
    if [ "${x#$1:}" != "$1" ] ; then
      exec 3<&-
      return 0
    fi
  done
  exec 3<&-
  return 1
}

function is_valid_group() {
  local x

  exec 3< /etc/group
  while read -u 3 x ; do
    if [ "${x#$1:}" != "$1" ] ; then
      exec 3<&-
      return 0
    fi
  done
  exec 3<&-
  return 1
}


function get_other_old_groups() {
  local x groupID

  exec 3< "$old_group"
  while read -u 3 x ; do
    groupID="$( cut_field 3 "$x" )"
    x="${x%%:*}"
    if ! is_old_initial_group "$x" \
      && [   $groupID -ge $FirstGroup \
          -a $groupID -le $LastGroup ] ; then
      echo "$x"
    fi
  done
  exec 3<&-
}


function process_readonly_variables() {

  readonly MigratoryAccGrpPairs="$( get_old_accounts_with_initial_group )"

  readonly MigratoryAccounts="$( get_old_accounts )"

  readonly MigratoryInitialGroups="$( get_old_initial_groups )"

  readonly OtherMigratoryGroups="$( get_other_old_groups )"

}


function check_account_group_names() {
  local Vaccs Vgrps x notClean

  Vaccs="$(
    echo "$MigratoryAccounts" \
     | while read x ; do
      if is_valid_user $x ; then echo "$x" ; fi
    done
  )"

  VInitGrps="$(
    echo "$MigratoryInitialGroups" \
     | while read x ; do
      if is_valid_group $x ; then echo "$x" ; fi
    done
  )"

  Vgrps="$(
    echo "$OtherMigratoryGroups" \
     | while read x ; do
      if is_valid_group $x ; then echo "$x" ; fi
    done
  )"

  if [ -n "$Vaccs" ] ; then
    echo These users had been already added:
    echo
    echo $Vaccs
    echo
    notClean="1"
  fi

  if [ -n "$Vgrps" ] ; then
    echo These groups had been already builded:
    echo
    echo $Vgrps
    echo
    echo Please correct it before migration.
    notClean="1"
  fi

  if [ -n "$VinitGrps" ] ; then
    echo These initial groups had been already builded:
    echo
    echo $VinitGrps
    echo
  fi

  if [ -n "$VinitGrps" -a "1" != "$notClean" ] ; then
    read -p "Will this be fine? (Y/n) " x
    x="${x^^}"

    while [ "Y" != "${x:=Y}" -a "N" != "$x" ] ; do
      read -p "Please insert 'Y' or 'N': " x
      x="${x^^}"
    done

    test "N" == "$x" && notClean="1"
  fi

  test "1" == "$notClean" && exit 1
}


function check_if_home_directorys_exist() {
  local homeDirectorys

  homeDirectorys="$(
    echo "$MigratoryAccounts" \
     | while read x ; do
      if [ -e "/home/$x" ] ; then echo "$x" ; fi
    done
  )"

  if [ -n "$homeDirectorys" ] ; then
    echo These home directory is already exist:
    echo
    echo "$homeDirectorys"
    echo
    echo Please correct it.
    exit 1
  fi
}


function get_user_comment() {

  grep "^$1:" "$old_passwd" \
    | cut_field 5
}


function get_user_initial_group() {
  local x

  echo "$MigratoryAccGrpPairs" \
   | while read x ; do
    if [ "$1" == "${x#*:}" ] ; then
      echo "${x%:*}"
      break
    fi
  done
}


function get_user_unshadow_password() {

  grep "^$1:" "$old_passwd" \
    | cut_field 2
}


function buile_accounts() {
  local comment initGrp password shadowData

  echo "$MigratoryAccounts" \
   | while read x ; do

    comment="$( get_user_comment $x )"
    initGrp="$( get_user_initial_group $x )"

    if ! is_valid_group $initGrp ; then
      groupadd $initGrp
    fi
    useradd -m -p 00000000 -c "$comment" -g $initGrp $x

    password="$( get_user_unshadow_password $x )"
    sed -i "s/^$x:[^:]*/$x:$password/" /etc/passwd

    shadowData="$( grep "^$x:" "$old_shadow" )"
    if [ -n "$shadowData" ] ; then
      sed -i "s/^$x:.*/$shadowData/" /etc/shadow
    fi

  done
}


function build_other_groups() {
  local x

  echo "$OtherMigratoryGroups" \
   | while read x ; do
     groupadd $x
  done
}


function set_effective_groups() {
  local user effGroups effGrp

  echo "$MigratoryAccounts" \
   | while read user ; do
    effGroups="$( grep -e "^[^:]*:[^:]*:[^:]*:$x," \
                    -e "^[^:]*:[^:]*:[^:]*:$x$" \
                    -e "^[^:]*:[^:]*:[^:]*:.*,$x," \
                    -e "^[^:]*:[^:]*:[^:]*:.*,$x$" "$old_group" \
                | cut_field 1 )"
    for effGrp in $effGroups ; do
      if ! is_valid_group $effGrp ; then groupadd $effGrp ; fi
      usermod -a -G $effGrp $user
    done
  done
}


function old_home_directory_of_user() {

  grep "^$1:" "$old_passwd" \
    | cut_field 6
}

function name_of_old_userID() {

  grep "^[^:]*:[^:]*:$1:" "$old_passwd" \
    | cut_field 1
}

function name_of_old_groupID() {

  grep "^[^:]*:[^:]*:$1:" "$old_group" \
    | cut_field 1
}


function main() {

  analysis_args "$@"

  exit_if_no_root_permission

  process_readonly_variables

  check_account_group_names

  check_if_home_directorys_exist

  buile_accounts

  build_other_groups

  set_effective_groups

}

main "$@"
