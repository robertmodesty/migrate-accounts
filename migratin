#!/bin/bash

readonly Old_Filesystem="$1"

BOARD_oldAccs=""
BOARD_oldGrps=""

function analysis_args() {

  if [   ! -d "$Old_Filesystem" \
      -o ! -f "$Old_Filesystem/etc/passwd" \
      -o ! -f "$Old_Filesystem/etc/shadow" \
      -o ! -f "$Old_Filesystem/etc/group" \
      -o ! -f "$Old_Filesystem/etc/gshadow" ] ; then
    echo "'$Old_Filesystem' is not a directiory." 1>&2
    exit 1
  fi

  shift

  while [ -n "$1" ] ; do
    case "$1" in
      "start="*)
        readonly FirstAccount="${1:6}"
        ;;
      "gstart="*)
        readonly FirstGroup="${1:7}"
        ;;
      "end="*)
        readonly LastAccount="${1:4}"
        ;;
      "gend="*)
        readonly LastGroup="${1:5}"
        ;;
    esac
    shift
  done

  if [ -z "$FirstAccount" ] ; then readonly FirstAccount=500 ; fi
  if [ -z "$FirstGroup" ] ; then readonly FirstGroup="$FirstAccount" ; fi
  if [ -z "$LastAccount" ] ; then readonly LastAccount=65533 ; fi
  if [ -z "$LastGroup" ] ; then readonly LastGroup=65533 ; fi
}


function exit_if_no_root_permission() {

  if [ "$(id -u)" != "0" ]; then
    echo "This script must be run with root permission!" 1>&2
    exit 1
  fi
}


function get_old_account_groups() {
  local x tmp uid

  exec 3< "$Old_Filesystem/etc/passwd"
  while read -u 3 x ; do
    tmp="${x#*:}"
    tmp="${tmp#*:}"
    uid="${tmp%%:*}"
    if [   $uid -ge $FirstAccount \
        -a $uid -le $LastAccount ] ; then
      echo ${x%%:*}
    fi
  done
  exec 3<&-
}



function main() {

  analysis_args "$@"

  exit_if_no_root_permission

  BOARD_oldAccs="$( get_old_account_groups )"

}

main "$@"
