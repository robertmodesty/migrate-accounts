#!/bin/bash

readonly Old_Filesystem="$1"

BOARD_oldAccs=""
BOARD_oldGrps=""

function analysis_args() {

  if [   ! -d "$Old_Filesystem" ] ; then
    echo "'$Old_Filesystem' is not a directiory." 1>&2
    exit 1
  fi

  shift

  while [ -n "$1" ] ; do
    case "$1" in
      "start="*)
        readonly FirstAccount="${1:6}"
        ;;
      "gstart="*)
        readonly FirstGroup="${1:7}"
        ;;
      "end="*)
        readonly LastAccount="${1:4}"
        ;;
      "gend="*)
        readonly LastGroup="${1:5}"
        ;;
      "passwd="*)
        readonly passwdFile="${1:7}"
        ;;
      "shadow="*)
        readonly shadowFile="${1:7}"
        ;;
      "group="*)
        readonly groupFile="${1:6}"
        ;;
      "gshadow="*)
        readonly gshadowFile="${1:8}"
        ;;
    esac
    shift
  done

  if [ -z "$FirstAccount" ] ; then readonly FirstAccount=500                          ; fi
  if [ -z "$FirstGroup"   ] ; then readonly FirstGroup="$FirstAccount"                ; fi
  if [ -z "$LastAccount"  ] ; then readonly LastAccount=65533                         ; fi
  if [ -z "$LastGroup"    ] ; then readonly LastGroup=65533                           ; fi
  if [ -z "$passwdFile"   ] ; then readonly passwdFile="$Old_Filesystem/etc/passwd"   ; fi
  if [ -z "$shadowFile"   ] ; then readonly shadowFile="$Old_Filesystem/etc/shadow"   ; fi
  if [ -z "$groupFile"    ] ; then readonly groupFile="$Old_Filesystem/etc/group"     ; fi
  if [ -z "$gshadowFile"  ] ; then readonly gshadowFile="$Old_Filesystem/etc/gshadow" ; fi

  if [ ! -f "$passwdFile"  ] ; then echo "'$passwdFile' is not a file."  ; exit 1 ; fi
  if [ ! -f "$shadowFile"  ] ; then echo "'$shadowFile' is not a file."  ; exit 1 ; fi
  if [ ! -f "$groupFile"   ] ; then echo "'$groupFile' is not a file."   ; exit 1 ; fi
  if [ ! -f "$gshadowFile" ] ; then echo "'$gshadowFile' is not a file." ; exit 1 ; fi
}


function exit_if_no_root_permission() {

  if [ "$(id -u)" != "0" ]; then
    echo "This script must be run with root permission!" 1>&2
    exit 1
  fi
}


function get_old_account_groups() {
  local x uid

  exec 3< "$passwdFile"
  while read -u 3 x ; do
    uid="${x#*:}"
    uid="${uid#*:}"
    uid="${uid%%:*}"
    if [   $uid -ge $FirstAccount \
        -a $uid -le $LastAccount ] ; then
      echo ${x%%:*}
    fi
  done
  exec 3<&-
}


function main() {

  analysis_args "$@"

  exit_if_no_root_permission

  BOARD_oldAccs="$( get_old_account_groups )"

}

main "$@"
