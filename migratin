#!/bin/bash

######################################################################
#                                                                    #
#    Accounts Migration Utility  Version 0.1      License: GPL 2     #
#                                                                    #
#                           By Robert D. Wei (Freedman) 2016 Mar.    #
#                                                                    #
######################################################################


# ******* Under here are list of readonly variables *******

readonly Old_Filesystem="$1"
readonly Regular_GroupID_Boundray="500"
NewLine="$( echo -e "0\n0" )"
readonly NewLine="${NewLine//0/}"


#   setup in function analysis_args():
#       readonly FirstAccount
#       readonly LastAccount
#       readonly ListFile
#       readonly Old_passwd
#       readonly Old_shadow
#       readonly Old_group
#       readonly Old_gshadow
#       readonly Old_maildir
#       readonly LoginShell
#       readonly If_Migrate_Eff_Grp
#       readonly if_cp_mails

#   setup in function process_readonly_variables():
#       readonly Old_passwd_Content
#       readonly Old_shadow_Content
#       readonly Old_group_Content
#       readonly Old_gshadow_Content
#       readonly Name_of_Old_GroupID_[]
#       readonly MigratoryAccGrpPairs
#       readonly MigratoryAccTable
#       readonly MigratoryAccounts
#       readonly MigratoryInitialGroups
#       readonly MigratoryEffectiveGroups
#       readonly MigratoryEffGrpTable






####################
# General Functions:  Field Operation
########################################################################

function cut_field() {
  local -i step field=$1
  local row

  if [ -n "$2" ] ; then
    row="$2"
    for (( step=1 ; step<field ; step++ )) ; do
      row=${row#*:}
    done
    echo "${row%%:*}"

  else
    while read row ; do
      for (( step=1 ; step<field ; step++ )) ; do
        row=${row#*:}
      done
      echo "${row%%:*}"
    done
  fi
}

function grep_field() {
  local -i step field=$1
  local inFile=0 pattern="$2" retrnVal=1 row fields

  if [ -n "$3" ] ; then
    inFile=9
    exec 9< "$3"
  fi

  while read -u $inFile row ; do
    fields="$row"
    for (( step=1 ; step<field ; step++ )) ; do
      fields=${fields#*:}
    done
    if [ "$pattern" == "${fields%%:*}" ] ; then
      echo "$row"
      retrnVal=0
    fi
  done

  exec 9<&-
  return $retrnVal
}




####################
# General Functions:  Account and Group Operation
########################################################################

function is_migratory_user() {

  echo "$MigratoryAccounts" \
   | grep_field 1 $1 > /dev/null
}

function is_migratory_user() {

  echo "$MigratoryAccounts" \
   | grep_field 1 $1 > /dev/null
}

function is_valid_user() {
  local row

  exec 3< /etc/passwd
  while read -u 3 row ; do
    if [ "${row#$1:}" != "$row" ] ; then
      exec 3<&-
      return 0
    fi
  done
  exec 3<&-
  return 1
}

function is_valid_group() {
  local row

  exec 3< /etc/group
  while read -u 3 row ; do
    if [ "${row#$1:}" != "$row" ] ; then
      exec 3<&-
      return 0
    fi
  done
  exec 3<&-
  return 1
}

function old_effective_groups_of_user() {
  local userName="$1"
  local row effMembrs membr

  echo "$Old_group_Content" \
   | while read row ; do

    effMembrs="${row##*:},"
    membr="${effMembrs%%,*}"
    effMembrs="${effMembrs#*,}"

    while [ -n "$membr" ] ; do
      if [ "$membr" == "$userName" ] ; then
        echo "${row%%:*}"
        break
      fi
      membr="${effMembrs%%,*}"
      effMembrs="${effMembrs#*,}"
    done

  done
}

function get_user_comment() {

  echo "$Old_passwd_Content" \
    | grep_field 1 "$1" \
    | cut_field 5
}

function get_user_unshadow_password() {

  echo "$Old_passwd_Content" \
    | grep_field 1 "$1" \
    | cut_field 2
}

function old_home_directory_of_user() {

  echo "$Old_passwd_Content" \
    | grep_field 1 "$1" \
    | cut_field 6
}

function old_userID_of() {

  grep_field 1 "$1" "$Old_passwd" \
    | cut_field 3
}

function old_groupID_of() {

  echo "$Old_group_Content" \
    | grep_field 1 "$1" \
    | cut_field 3
}






####################
# functions prepare readonly variable data
########################################################################

function sort_old_passwd_file_by_uid() {

  sort -t : -k 3 -n "$Old_passwd"
}

function sort_old_group_file_by_gid() {

  sort -t : -k 3 -n "$Old_group"
}

function old_groupID_to_name_table() {
    echo "$Old_group_Content" \
     | sed 's/^\([^:]*\):[^:]*:\([^:]*\):.*/[\2]="\1"/'
}

function get_old_accounts_and_initial_groups() {
  local row userID groupID

  echo "$Old_passwd_Content" \
   | while read row ; do
    userID="$( cut_field 3 "$row" )"
    if [   $userID -ge $FirstAccount \
        -a $userID -le $LastAccount ] ; then
      groupID="$( cut_field 4 "$row" )"
      echo "${row%%:*}:${Name_of_Old_GroupID_[$groupID]}"
    fi
  done
}

function get_migratory_account_table() {
  local pairs userName initGroup

  echo "$MigratoryAccGrpPairs" \
   | while read pairs ; do
      userName="$( cut_field 1 $pairs )"
      initGroup="$( cut_field 2 $pairs )"
      echo -n "$userName:$( old_userID_of $userName )::"
      echo ":$initGroup:$( old_groupID_of $initGroup )::"
  done
}

function get_old_accounts() {

  echo "$MigratoryAccGrpPairs" \
   | cut_field 1
}

function get_old_initial_groups() {

  echo "$MigratoryAccGrpPairs" \
   | cut_field 2 \
   | sort \
   | uniq
}

function get_old_effective_groups() {
  local row name users user

  echo "$Old_group_Content" \
   | while read row ; do

    name="${row%%:*}"
    users="${row##*:}"

    user=""
    until [ "$users" == "$user" ] ; do
      user="${users%%,*}"
      users="${users#*,}"
      if is_migratory_user $user ; then
        echo "$name"
        break
      fi
    done

  done
}

function get_effective_group_table() {
  local effGroup

  for effGroup in $MigratoryEffectiveGroups ; do
    echo "$effGroup:$( old_groupID_of $effGroup )::"
  done
}

function process_user_data_line(){
  local x="$1" tmp
  local oldUser newUserNam newUID newGrp

  x="$( echo $x )"
  test -z "$x" && reture 1

  x="${x%%#*}"
  x="$( echo $x )"
  test -z "$x" && reture 0

  oldUser="${x%%:*}"
  x="${x#*:}"
  newUserNam="${x%%:*}"
  x="${x#*:}"
  newUID="${x%%:*}"
  newGrp="${x#*:}"

  tmp="$( name_of_old_userID $oldUser )"
  test -n "$tmp" && oldUser="$tmp"

  test -z "$newUserNam" && newUserNam="$oldUser"

  if [-z "$newGrp" ] ; then
    tmp="$( grep_field 1 $oldUser | cut_field 4 )"
    newGrp="$( name_of_old_groupID $tmp )"
  fi

  MigratoryUserListFromFile+="$oldUser:$newUserNam:$newUID:$newGrp$NewLine"
}

function process_group_data_line(){
  local x="$1" tmp
  local oldGrp newGrpNam newGID

  x="$( echo $x )"
  test -z "$x" && reture 1

  x="${x%%#*}"
  x="$( echo $x )"
  test -z "$x" && reture 0

  oldGrp="${x%%:*}"
  x="${x#*:}"
  newGrpNam="${x%%:*}"
  newGID="${x#*:}"

  tmp="$( name_of_old_groupID $oldUser )"
  test -n "$tmp" && oldGrp="$tmp"

  test -z "$newGrpNam" && newGrpNam="$oldGrp"

  MigratoryGroupListFromFile+="$oldGrp:$newGrpNam:$newGID$NewLine"
}

function read_list_from_file() {
  local x err filename="$1"
  local -i count=0

  exec 3< "$filename"

  while read -u 3 x ; do
    case "$x" in
      "users:")
        while read -u 3 x ; do
          count=count+1
          process_user_data_line "$x"
          err="$?"
          test "$err" != "0" && break
        done
        ;;
      "groups:")
        while read -u 3 x ; do
          count=count+1
          process_group_data_line "$x"
          err="$?"
          test "$err" != "0" && break
        done
        ;;
    esac
    test  "$err" == "2" && err=fileError && break
  done

  exec 3<&-

  if [ "$err" == "fileError" ] ; then
    echo "Error reading file $filename on line $count:"
    echo "$x"
  fi
}

function remove_old_system_groups() {
  local group groupID

  while read group ; do
    groupID="$( old_groupID_of $group )"
    test $groupID -ge $Regular_GroupID_Boundray && echo $group
  done
}




####################
# functions for migrating passwords and data
########################################################################

function passwd_content_after_migration() {
  local row user password

  exec 5< /etc/passwd

  while read -u 5 row ; do
    user="${row%%:*}"

    if is_migratory_user $user ; then
      password="$( get_user_unshadow_password $user )"
      row="${row#*:}"
      row="$user:$password:${row#*:}"
      echo "$row"

    else
      echo "$row"
    fi

  done

  exec 5<&-
}

function shadow_content_after_migration() {
  local row user

  exec 5< /etc/shadow

  while read -u 5 row ; do
    user="${row%%:*}"

    if is_migratory_user $user ; then
      echo "$Old_shadow_Content" \
       | grep_field 1 "$user"
    else
      echo "$row"
    fi

  done

  exec 5<&-
}


function generate_ID_changing_table() {
  local oldTableFile="$1" newTableFile="$2"
  local oldIDfile newIDfile sameIDfile
  local changedOldIDfile changedNewIDfile

  oldIDfile="$(mktemp)"
  newIDfile="$(mktemp)"
  sameIDfile="$(mktemp)"
  changedOldIDfile="$(mktemp)"
  changedNewIDfile="$(mktemp)"

  cut -d ':' -f 1,3 $oldTableFile > $oldIDfile

  cut -d ':' -f 1,3 $newTableFile > $newIDfile

  cat $oldIDfile $newIDfile \
   | sort \
   | uniq -d \
   > $sameIDfile

  cat $sameIDfile $oldIDfile \
   | sort \
   | uniq -u \
   > $changedOldIDfile

  cat $sameIDfile $newIDfile \
   | sort \
   | uniq -u \
   > $changedNewIDfile

  join -t ':' $changedOldIDfile $changedNewIDfile \
   | sed 's/[^:]*:\([^:]*\):\(.*\)/[\1]="\2"/'

  rm $oldIDfile $newIDfile $sameIDfile
  rm $changedOldIDfile $changedNewIDfile
}

function userID_changing_table() {

  generate_ID_changing_table "$Old_passwd" "/etc/passwd"
}

function groupID_changing_table() {

  generate_ID_changing_table "$Old_group" "/etc/group"
}


function migrate_ownership() {

  ##### Require Arrays:  newID_of_Old_UserID_[], newID_of_Old_GroupID_[]

  local filename oldOwnerID oldGroupID newOwnerID newGroupID

  find $1/* -printf "%U:%G:%p\n" \
   | while read filename ; do

    oldOwnerID="${filename%%:*}"
    filename="${filename#*:}"
    oldGroupID="${filename%%:*}"
    filename="${filename#*:}"
    newOwnerID="${newID_of_Old_UserID_[$oldOwnerID]}"
    newGroupID="${newID_of_Old_GroupID_[$oldGroupID]}"

    if [ -n "$newOwnerID" ] ; then
      if [ -n "$newGroupID" ] ; then
        chown -h $newOwnerID:$newGroupID "$filename"
      else
        chown -h $newOwnerID "$filename"
      fi
    elif [ -n "$newGroupID" ] ; then
      chgrp -h $newGroupID "$filename"
    fi
  done
}





####################
# functions of all steps
########################################################################

function exit_if_no_root_permission() {

  if [ "$(id -u)" != "0" ]; then
    echo "This script must be run with root permission!" 1>&2
    exit 1
  fi
}


function analysis_args() {
  local unfile='is not a file.'
  local undir='is not a directiry.'

  if [   ! -d "$Old_Filesystem" ] ; then
    echo "'$Old_Filesystem' is not a directiory." 1>&2
    exit 1
  fi
  shift

  FirstAccount=500
  LastAccount=65533
  Old_passwd="$Old_Filesystem/etc/passwd"
  Old_shadow="$Old_Filesystem/etc/shadow"
  Old_group="$Old_Filesystem/etc/group"
  Old_gshadow="$Old_Filesystem/etc/gshadow"
  Old_maildir="$Old_Filesystem/var/spool/mail"
  LoginShell="/bin/bash"
  If_Migrate_Eff_Grp="true"
  if_cp_mails="false"

  while [ -n "$1" ] ; do
    case "$1" in
      "--start="*)
        FirstAccount="${1:8}"
        ;;
      "--end="*)
        LastAccount="${1:6}"
        ;;
      "--passwd="*)
        Old_passwd="${1:9}"
        ;;
      "--shadow="*)
        Old_shadow="${1:9}"
        ;;
      "--group="*)
        Old_group="${1:8}"
        ;;
      "--gshadow="*)
        Old_gshadow="${1:10}"
        ;;
      "--maildir="*)
        Old_maildir="${1:10}"
        if_cp_mails="true"
        ;;
      "--loginshell="*)
        LoginShell="${1:13}"
        ;;
      "--no-eff-grp")
        If_Migrate_Eff_Grp="false"
        ;;
      "-m"|"--copy-mails")
        if_cp_mails="true"
        ;;
      "--listfile="*)
        ListFile="${1:11}"
        ;;
    esac
    shift
  done

  readonly FirstAccount LastAccount Listfile
  readonly Old_passwd Old_shadow Old_group Old_gshadow
  readonly Old_maildir LoginShell If_Migrate_Eff_Grp if_cp_mails

  test ! -f "$Old_passwd"  && echo "'$Old_passwd' $unfile"  && exit 1
  test ! -f "$Old_shadow"  && echo "'$Old_shadow' $unfile"  && exit 1
  test ! -f "$Old_group"   && echo "'$Old_group' $unfile"   && exit 1
  test ! -f "$Old_gshadow" && echo "'$Old_gshadow' $unfile" && exit 1
  test ! -d "$Old_maildir" && $if_cp_mails && \
      echo "'$Old_maildir' $undir" && exit 1
}


function process_readonly_variables() {

  readonly Old_passwd_Content="$( sort_old_passwd_file_by_uid )"

  readonly Old_shadow_Content="$( cat $Old_shadow )"

  readonly Old_group_Content="$( sort_old_group_file_by_gid )"

  readonly Old_gshadow_Content="$( cat $Old_gshadow )"

  eval readonly Name_of_Old_GroupID_=( $( old_groupID_to_name_table ) )

  readonly MigratoryAccGrpPairs="$( get_old_accounts_and_initial_groups )"
  if [ -z "$MigratoryAccGrpPairs" ] ; then
    echo Can not find any migratory account!
    exit 1
  fi

  readonly MigratoryAccTable="$( get_migratory_account_table )"

  readonly MigratoryAccounts="$( get_old_accounts )"

  readonly MigratoryInitialGroups="$( get_old_initial_groups )"

  if $If_Migrate_Eff_Grp ; then

    readonly MigratoryEffectiveGroups="$( \
      get_old_effective_groups \
       | remove_old_system_groups \
    )"

    readonly MigratoryEffGrpTable="$( get_effective_group_table )"

  fi
}


function check_account_group_names() {
  local Vaccs VInitGrps VEffGrps grouplessUsers x notClean

  Vaccs="$(
    for x in $MigratoryAccounts ; do
      if is_valid_user $x ; then echo "$x" ; fi
    done
  )"

  VInitGrps="$(
    for x in $MigratoryInitialGroups  ; do
      if is_valid_group $x ; then echo "$x" ; fi
    done
  )"

  VEffGrps="$(
    for x in $MigratoryEffectiveGroups ; do
      if is_valid_group $x ; then echo "$x" ; fi
    done
  )"

  x="$(
    echo "$MigratoryAccGrpPairs" \
    | grep ":$" \
    | sed "s/:$//"
  )"
  grouplessUsers="$( echo $x )"

  if [ -n "$Vaccs" ] ; then
    echo These users had been already added:
    echo
    echo $Vaccs
    echo
    notClean="1"
  fi

  if [ -n "$VEffGrps" ] ; then
    echo These effective groups had been already builded:
    echo
    echo $VEffGrps
    echo
  fi

  if [ -n "$VInitGrps" ] ; then
    echo These initial groups had been already builded:
    echo
    echo $VInitGrps
    echo
  fi

  if [ -n "$grouplessUsers" ] ; then
    echo These users do not have a named initial group:
    echo
    echo $grouplessUsers
    echo
    echo Please correct it!!!
    notClean="1"
  fi

  if [ -n "$VEffGrps" -o -n "$VInitGrps" ] && [ "1" != "$notClean" ] ; then
    read -p "Will this be fine? (Y/n) " x
    x="${x^^}"

    while [ "Y" != "${x:=Y}" -a "N" != "$x" ] ; do
      read -p "Please insert 'Y' or 'N' (Y/n):  " x
      x="${x^^}"
    done

    test "N" == "$x" && notClean="1"
  fi

  test "1" == "$notClean" && exit 1
}


function check_if_home_directorys_exist() {
  local user homeDirectorys

  homeDirectorys="$(
    for user in $MigratoryAccounts ; do
      if [ -e "/home/$user" ] ; then echo "$user" ; fi
    done
  )"

  if [ -n "$homeDirectorys" ] ; then
    echo These home directory is already exist:
    echo
    echo "$homeDirectorys"
    echo
    echo Please correct it.
    exit 1
  fi
}


function buile_accounts() {
  local accGrpPair user comment initGrp password shadowData

  for accGrpPair in $MigratoryAccGrpPairs ; do
    user="${accGrpPair%:*}"
    echo -ne "\E[80D$user\E[K"

    comment="$( get_user_comment $user )"
    initGrp="${accGrpPair#*:}"

    is_valid_group $initGrp || groupadd $initGrp
    useradd -m -c "$comment" -g $initGrp -s $LoginShell $user

  done
  echo
}


function migrate_passwords() {
  local content

  content="$( passwd_content_after_migration )"
  echo "$content" > /etc/passwd

  content="$( shadow_content_after_migration )"
  echo "$content" > /etc/shadow
}


function build_effective_groups() {
  local group

  for group in $MigratoryEffectiveGroups ; do
    is_valid_group $group || groupadd $group
  done
}


function set_effective_groups() {
  local user effGroups effGrp

  for user in $MigratoryAccounts ; do
    effGroups="$( old_effective_groups_of_user $user )"
    for effGrp in $effGroups ; do
      is_valid_group $effGrp && usermod -a -G $effGrp $user
    done
  done
}


function copy_home_directorys() {
  local user oldHome when_Empty_Home=false

  eval local -a newID_of_Old_UserID_=( $( userID_changing_table ) )
  eval local -a newID_of_Old_GroupID_=( $( groupID_changing_table ) )

  echo -n "copy:  "
  for user in $MigratoryAccounts ; do
    oldHome="$Old_Filesystem/$(old_home_directory_of_user $user)"
    if [ "$(echo $oldHome/*)" == "$oldHome/*" ] ; then
      ! $when_Empty_Home \
        && echo -en "\nThese users have empty home directorys:  " \
        && when_Empty_Home=true
      echo -n "$user "
      continue
    else
      $when_Empty_Home && echo -ne "\ncopy:  " && when_Empty_Home=false
    fi
    echo -n "$user "

    cp -a $oldHome/* /home/$user

    migrate_ownership "/home/$user"

  done
  echo
}


function copy_mails() {
  local mailFile filename ownerID

  cd $Old_maildir

  ls | while read mailFile ; do
    if is_migratory_user $mailFile ; then
      cp -a $mailFile /var/spool/mail/
      find /var/spool/mail/$mailFile -printf "%U:%p\n" \
       | while read filename ; do
        ownerID="${filename%%:*}"
        filename="${filename#*:}"
        chown $(name_of_old_userID $ownerID):mail "$filename"
      done
    fi
  done

  cd -
}





####################
#  Main Function
########################################################################

function main() {

  exit_if_no_root_permission

  echo "Preparing..."
  analysis_args "$@"

  process_readonly_variables

  check_account_group_names

  check_if_home_directorys_exist

  echo "Building accounts..."
  buile_accounts

  echo "Migrating passwords..."
  migrate_passwords

  if $If_Migrate_Eff_Grp ; then
    echo "Building effective groups..."
    build_effective_groups
    echo "Setting user's effective groups..."
    set_effective_groups
  fi

  echo "Copying home directorys of users..."
  copy_home_directorys

  $if_cp_mails && copy_mails

}





##### Start this program ######

main "$@"
