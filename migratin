#!/bin/bash

readonly Old_Filesystem="$1"
readonly ValidUsers="$( cat /etc/passwd | sed s/:.*// )"
readonly ValidGroups="$( cat /etc/group | sed s/:.*// )"

BOARD_oldAccs=""
BOARD_oldGrps=""

function analysis_args() {

  if [   ! -d "$Old_Filesystem" ] ; then
    echo "'$Old_Filesystem' is not a directiory." 1>&2
    exit 1
  fi

  shift

  while [ -n "$1" ] ; do
    case "$1" in
      "--start="*)
        readonly FirstAccount="${1:8}"
        ;;
      "--gstart="*)
        readonly FirstGroup="${1:9}"
        ;;
      "--end="*)
        readonly LastAccount="${1:6}"
        ;;
      "--gend="*)
        readonly LastGroup="${1:7}"
        ;;
      "--passwd="*)
        readonly old_passwd="${1:9}"
        ;;
      "--shadow="*)
        readonly old_shadow="${1:9}"
        ;;
      "--group="*)
        readonly old_group="${1:8}"
        ;;
      "--gshadow="*)
        readonly old_gshadow="${1:10}"
        ;;
    esac
    shift
  done

  if [ -z "$FirstAccount" ] ; then readonly FirstAccount=500                          ; fi
  if [ -z "$FirstGroup"   ] ; then readonly FirstGroup="$FirstAccount"                ; fi
  if [ -z "$LastAccount"  ] ; then readonly LastAccount=65533                         ; fi
  if [ -z "$LastGroup"    ] ; then readonly LastGroup=65533                           ; fi
  if [ -z "$old_passwd"   ] ; then readonly old_passwd="$Old_Filesystem/etc/passwd"   ; fi
  if [ -z "$old_shadow"   ] ; then readonly old_shadow="$Old_Filesystem/etc/shadow"   ; fi
  if [ -z "$old_group"    ] ; then readonly old_group="$Old_Filesystem/etc/group"     ; fi
  if [ -z "$old_gshadow"  ] ; then readonly old_gshadow="$Old_Filesystem/etc/gshadow" ; fi

  if [ ! -f "$old_passwd"  ] ; then echo "'$old_passwd' is not a file."  ; exit 1 ; fi
  if [ ! -f "$old_shadow"  ] ; then echo "'$old_shadow' is not a file."  ; exit 1 ; fi
  if [ ! -f "$old_group"   ] ; then echo "'$old_group' is not a file."   ; exit 1 ; fi
  if [ ! -f "$old_gshadow" ] ; then echo "'$old_gshadow' is not a file." ; exit 1 ; fi
}


function exit_if_no_root_permission() {

  if [ "$(id -u)" != "0" ]; then
    echo "This script must be run with root permission!" 1>&2
    exit 1
  fi
}


function get_old_account_groups() {
  local x uid

  exec 3< "$old_passwd"
  while read -u 3 x ; do
    uid="${x#*:}"
    uid="${uid#*:}"
    uid="${uid%%:*}"
    if [   $uid -ge $FirstAccount \
        -a $uid -le $LastAccount ] ; then
      echo ${x%%:*}
    fi
  done
  exec 3<&-
}


function is_old_initial_group() {

  echo "$BOARD_oldAccs" \
   | grep $1 > /dev/null
  return $?
}

function is_valid_user() {

  echo "$ValidUsers" \
   | grep $1 > /dev/null
  return $?
}

function is_valid_group() {

  echo "$ValidGroups" \
   | grep $1 > /dev/null
  return $?
}


function get_old_grops_different_from_accounts() {
  local x gid

  exec 3< "$old_group"
  while read -u 3 x ; do
    gid="${x#*:}"
    gid="${gid#*:}"
    gid="${gid%%:*}"
    x="${x%%:*}"
    if ! is_old_initial_group "$x" \
      && [   $gid -ge $FirstGroup \
          -a $gid -le $LastGroup ] ; then
      echo "$x"
    fi
  done
  exec 3<&-
}


function check_account_group_names() {
  local Vaccs Vgrps x

  Vaccs="$(
    echo "$BOARD_oldAccs" \
     | while read x ; do
      if is_valid_user $x ; then echo "$x " ; fi
    done
  )"

  Vgrps="$(
    (echo "$BOARD_oldAccs" ; echo "$BOARD_oldGrps") \
     | while read x ; do
      if is_valid_group $x ; then echo "$x " ; fi
    done
  )"

  if [ -n "$Vaccs" ] ; then
    echo These users had been already added:
    echo
    echo $Vaccs
    echo
  fi

  if [ -n "$Vgrps" ] ; then
    echo These groups had been already builded:
    echo
    echo $Vgrps
    echo
    echo Please correct it before migration.
    exit 1

  elif [ -n "$Vaccs" ] ; then
    echo Please correct it before migration.
    exit 1
  fi
}


function check_if_home_directorys_exist() {
  local homeDirectorys

  homeDirectorys="$(
    echo "$BOARD_oldAccs" \
     | while read x ; do
      if [ -e "/home/$x" ] ; then echo "$x " ; fi
    done
  )"

  if [ -n "$homeDirectorys" ] ; then
    echo These home directory is already exist:
    echo
    echo "$homeDirectorys"
    echo
    echo Please correct it.
  fi
}


function cut_field() {
  local -i step field=$1
  local x

  read x

  for (( step=1 ; step<field ; step++ )) ; do
    x=${x#*:}
  done

  echo "${x%%:*}"
}


function get_user_comment() {

  grep "^$1" "$old_passwd" \
    | cut_field 5
}


function get_user_initial_group() {
  local groupID="$(

    grep "^$1" "$old_passwd" \
      | cut_field 4
  )"

  grep "^[^:]*:[^:]*$groupID" "$old_group" \
    | cut_field 3
}


function get_user_unshadow_password() {

  grep "^$1" "$old_passwd" \
    | cut_field 2
}


function main() {

  analysis_args "$@"

  exit_if_no_root_permission

  BOARD_oldAccs="$( get_old_account_groups )"

  BOARD_oldGrps="$( get_old_grops_different_from_accounts )"

  check_account_group_names

  check_if_home_directorys_exist

}

main "$@"
